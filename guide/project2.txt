# Intersection Observer API로 스크롤에 반응하기
-> const observer = new IntersectionObserver (callback, option)

<1> observer
: IntersectionObserver 클래스의 인스턴스; 관찰을 중단하거나 시작
: observer.observe( 감시할 Node )

<2> callback
A. entries
: IntersectionObserverEntry 객체의 배열 
: 각 entry는 하나의 관찰된 Target 요소에 대한 정보를 담고 있는 객체
: Target 요소들이 출현/소멸될 때마다 새롭게 정의된다

B. entry 객체 정보
entry.target: 관찰된 요소를 나타내는 DOM 요소
entry.intersectionRatio: 관찰된 요소가 intersect하는 비율; 0에서 1 사이의 값
entry.isIntersecting: 관찰된 요소가 뷰포트에 보이는지 나타내는 불리언 값 (True: 보임, False: 안보임)

<3> option = {
  A. threshold
  : 콜백을 호출할 빈도와 intersectionRatio 기준을 배열로 지정 
  ex. [0, 0.5. 0.8]
  : target이 0%, 50%, 80% 만큼 intersect 될 때마다 callback을 호출

  B. rootMargin: Intersect Container의 크기를 확대/축소
  C. root: Intersect Container를 지정 (기본값: null (뷰포트))
}


## 솔루션
1. <주문>
마지막 섹션이 보여지는 경우 마지막을, 그 외의 경우 첫번째를 선택 (감지)
선택한 섹션이 없어지면 다음 navItem으로 active 효과 옮기기 (반응)
navItem을 클릭하면 smooth하게 이동 (반응)


2. <구현1: 반응>
선택한 섹션이 없어지면 다음 navItem으로 active 효과 옮기기 (반응)
> navItem은 순서가 있다 
- navItems라는 배열이 필요하다 -> sectionIds 배열 생성
- const navItem = navItems[navIndex]; 
- navIndex는 intersection 이벤트가 발생할 때 갱신된다 (콜백)

> activeNavItem.classList.remove('active')
> activeNavItem = navItem
> activeNavItem.classList.add('active')

navItems.forEach(navItem => {
 navItem.addEventListener('click', () => {
  const target = navItem.getAttribute('href')
  const targetSection = document.querySelector('target')
  target.scrollIntoView({
    behavior: 'smooth',
  })
})
})


3. <구현2: 감지> // 지정, 선택은 Indexing이다
마지막 섹션이 보여지는 경우 마지막을, 그 외의 경우 첫번째를 선택 (감지) 
isLastVisible이 True이면 마지막 index를, False이면 보이는것 중 첫번째 index를 반환 (Ternary)
- const navIndex = isLastVisible ? sectionIds.length - 1 : isVisible.indexOf(true) => 예외처리: 반환값이 -1인 경우
> intersection 콜백 정의
; function callback(entries) {
	entries.forEach((entry) => {

  })
}

; sections.forEach(section => {
  observer.observe(section)
})

> isVisible, isLastVisible 정의
const isVisible = sectionIds.map(() => false); 
const index = sectionIds.indexOf(`#${entry.target.id}`);
isVisible[index] = entry.isIntersecting; 

isLastVisible =
index === sectionIds.length - 1 (마지막 섹션이면서) &&
entry.isIntersecting (뷰포트에 보여지는데) &&
entry.intersectionRatio > 0.99 (99%가 보여지는 경우)


4. <문제/해결>
> 섹션들의 Intersection 전환이 너무 늦음 ->  rootMargin: top 적용
> Contact 섹션의 경우, 진입했을 때만 콜백이 호출됨 -> threshold: [0, 1] 2회 호출



